controlsocket: /tmp/requestd.sock
concurrent_hooks: 2
web_listen: "[::]:21001"

respondd:
  interface: "ffhl"
  # https://gluon.readthedocs.io/en/v2020.1.x/features/monitoring.html#gluon-respondd
  categories:
    - "nodeinfo"
    - "statistics"
    - "neighbours"
  interval: 60

database:
  dbfile: /var/lib/requestd/nodes.db
  remove_after: 1209600
  offline_after: 300
  # evaluate database every n seconds (searching for offline nodes)
  evaluate_every: 15

events:
  # triggered when a new node appears
  # the last response from a node will be send to stdin of your script
  new_node:
    - exec: /usr/local/lib/requestd/new_node.py
      # you can make things a bit easier with
      # setting env variables by providing a jq[0] filter
      # remember that these filters can return an empty result
      vars:
        NODE_contact_info: .nodeinfo.owner.contact
        NODE_addresses: .nodeinfo.network.addresses
        NODE_nproc: .nodeinfo.hardware.nproc
        NODE_fastd: .nodeinfo.software.fastd.enabled
  online_after_offline:
    - exec: /usr/local/lib/requestd/online_again.py
  node_offline:
    - exec: /usr/local/lib/requestd/node_offline.py

web_endpoints:
  - path: /metrics
    exec: /usr/local/lib/requestd/prometheus_web.py
  - path: /graph.json
    exec: /usr/local/lib/requestd/hopglass_graph.py
  - path: /nodes.json
    exec: /usr/local/lib/requestd/hopglass_nodes.py
# [0] https://stedolan.github.io/jq/

# [0] https://stedolan.github.io/jq/
